theory Visa

begin

builtins:  signing, asymmetric-encryption

functions: f/2, MAC/3, MACprime/2


/////////////////////////////////////////////////////
//                     Rules                       //
/////////////////////////////////////////////////////

// ========= Terminal-Issuer Channel ========== //

rule Terminal_Issuer_Channel:
    [ Send(Sender, Recipient, channelID, msg) ]
  -->
    [ Recv(Sender, Recipient, channelID, msg) ]



// =========== Application Transaction Counter ==========//

rule Generate_ATC:
    [ Fr(~ATC) ]-->[ !ATC(~ATC), Out(~ATC) ]



// =============== Card setup ================ //

rule Create_Card:
    [ Fr(~PAN),//card number
      Fr(~mk),//symmetric key shared with issuer
      Fr(~privkCard)//card's private key
    ]
  -->
    [ !SharedKey(~PAN, ~mk),
      //annotate the issuing bank
      !IssuedBy(~PAN, $Issuer),
      //PKI
      !LtkCard(~PAN, ~privkCard),
      !Pk(~PAN, pk(~privkCard)),
      Out(pk(~privkCard))
    ]



// ============== Compromise =============== //

rule Compromise_Card:
    [ !LtkCard(~PAN, ~privkCard) ]
  --[ Compromise(~PAN) ]->
    [ Out(<~PAN, ~privkCard>) ]

rule Compromise_Shared_Key:
    [ !IssuedBy(~PAN, $Issuer),
      !SharedKey(~PAN, ~mk) ]
  --[ Compromise($Issuer),
      Compromise(~PAN) ]->
    [ Out(~mk) ]



// =========== Get Processing Options ============ //

rule Terminal_Sends_GPO:
    let PDOL = <$amount, ~un>
    in
    [ Fr(~un) ]
  -->
    [ Out(<'GET_PROCESSING_OPTIONS', PDOL>),
      Terminal_Sent_GPO($Terminal, PDOL) ]

rule Card_Responds_To_GPO_TC:
    let AIP = 'fDDA'
        sK = f(~mk, ATC)
        AC = MAC(sK, PDOL, ATC)
        CID = 'TC'
    in
    
    [ In(<'GET_PROCESSING_OPTIONS', PDOL>), 
      Fr(~nc),
      !IssuedBy(~PAN, $Issuer), 
      !ATC(ATC), 
      !SharedKey(~PAN, ~mk) ]
  
    --[ Once(<~PAN, ATC, 'Card'>) ]->
    
    [ Out(<AIP, CID, ATC, AC>), 
      Card_Responded_To_GPO(PDOL, ~PAN, ATC, AIP, AC, ~nc) ] 


rule Card_Responds_To_GPO_ARQC:
    let AIP = 'fDDA'
        sK = f(~mk, ATC)
        AC = MAC(sK, PDOL, ATC)
        CID = 'ARQC'
    in

    [ In(<'GET_PROCESSING_OPTIONS', PDOL>), 
      Fr(~nc),
      !IssuedBy(~PAN, $Issuer), 
      !ATC(ATC), 
      !SharedKey(~PAN, ~mk) ]
  
    --[ Once(<~PAN, ATC, 'Card'>) ]->
    
    [ Out(<AIP, CID, ATC, AC>), 
      Card_Responded_To_GPO(PDOL, ~PAN, ATC, AIP, AC, ~nc) ]



// ============== Read Records ==================== //

rule Terminal_Sends_ReadRecord:
    [ Terminal_Sent_GPO($Terminal, PDOL), 
      In(<AIP, CID, ATC, AC>) ]
    -->
    [ Out('READ_RECORD'), 
      Terminal_Sent_ReadRecord(PDOL, AIP, CID, ATC, AC) ]


rule Card_Responds_To_ReadRecord:
    let amount = fst(PDOL)
        un = snd(PDOL)
        sm = <un, amount, ~nc, ATC, AIP>
        SDAD = sign(sm, ~privkCard)
        transaction = <~PAN, PDOL, ATC, AC>
    in
    
    [ Card_Responded_To_GPO(PDOL, ~PAN, ATC, AIP, AC, ~nc), 
      !LtkCard(~PAN, ~privkCard), 
      In('READ_RECORD') ] 
      
    --[ Running(~PAN, 'Terminal', <'Card', 'Terminal', transaction>), 
        Running(~PAN, $Issuer, <'Card', 'Issuer', transaction>) ]->
    
    [ Out(<~PAN, SDAD, ~nc>) ]



// =========== Offline Data Authentication ============ //

rule Terminal_Receives_SDAD_TC:
    let amount = fst(PDOL)
        un = snd(PDOL)
        sm_verify = <un, amount, ~nc, ATC, AIP>
        transaction = <~PAN, PDOL, ATC, AC>
        verification = verify(SDAD, sm_verify, publk)
    in

    [ Terminal_Sent_ReadRecord(PDOL, AIP, 'TC', ATC, AC), 
      In(<~PAN, SDAD, ~nc>), 
      !Pk(~PAN, publk) ]
 
    --[ Eq(verification, true) ]->
    
    [ Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'TC', ATC, AC) ]



// ============== Offline Authorization ============== //

rule Terminal_Receives_TC:
    let transaction = <~PAN, PDOL, ATC, AC> in
    [ Terminal_Ready_To_Send_AC($Terminal, ~PAN, PDOL, 'TC', ATC, AC),
      !IssuedBy(~PAN, $Issuer) ]
  --[ Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>),
      Honest($Issuer), Honest(~PAN) ]->
    [ ]



// =========== Online Data Authentication ============ //

rule Terminal_Receives_SDAD_ARQC:
    let amount = fst(PDOL)
        un = snd(PDOL)
        sm_verify = <un, amount, ~nc, ATC, AIP>
        transaction = <~PAN, PDOL, ATC, AC>
        verification = verify(SDAD, sm_verify, publk)
    in

    [ Terminal_Sent_ReadRecord(PDOL, AIP, 'ARQC', ATC, AC), 
      In(<~PAN, SDAD, ~nc>), 
      !Pk(~PAN, publk)]
 
    --[ Eq(verification, true),  
        Running($Terminal, $Issuer, <'Terminal', 'Issuer', transaction>) ]->
    
    [ Terminal_Ready_To_Forward($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC) ]



// ============== Online Authorization ============== //

rule Terminal_Receives_ARQC:
    let transaction = <~PAN, PDOL, ATC, AC> in

    [ Terminal_Ready_To_Forward($Terminal, ~PAN, PDOL, 'ARQC', ATC, AC), 
      !IssuedBy(~PAN, $Issuer), 
      Fr(~channelID) ]
    
    -->
    
    [ Send($Terminal, $Issuer, <~channelID, '1'>, transaction), 
      Terminal_Ready_To_Send_AC_online($Terminal, $Issuer, ~PAN, ~channelID, PDOL, 'ARQC', ATC, AC) ]


rule Terminal_Approves_ARQC:
    let transaction = <~PAN, PDOL, ATC, AC> in
    
    [ Terminal_Ready_To_Send_AC_online($Terminal, $Issuer, ~PAN, ~channelID, PDOL, 'ARQC', ATC, AC), 
      !IssuedBy(~PAN, $Issuer), 
      Recv($Issuer, $Terminal, <~channelID, '2'>, <'ACCEPTED', ARPC>) ]
    
    --[ Online(), 
        Commit('Terminal', ~PAN, <'Card', 'Terminal', transaction>), 
        Honest($Terminal), Honest($Issuer), Honest(~PAN),
        Commit($Terminal, $Issuer, <'Issuer', 'Terminal', transaction>) ]->
    
    [ ]



// ================== Issuer =================== //

rule Issuer_Receives_AC:
    let AC = MAC(f(~mk, ATC), PDOL, ATC)
        ARPC = MACprime(f(~mk, ATC), AC)
        transaction = <~PAN, PDOL, ATC, AC>
    in
    [ Recv($Terminal, $Issuer, <channelID, '1'>, transaction),
      !SharedKey(~PAN, ~mk),
      !IssuedBy(~PAN, $Issuer) ]
  --[ Once(<~PAN, ATC, 'Issuer'>), //used in the restriction 'once'
      Running($Issuer, $Terminal, <'Issuer', 'Terminal', transaction>) ]->
    [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC) ]


rule Issuer_Commits:
    let transaction = <~PAN, PDOL, ATC, AC> in
    [ Issuer_Commits($Issuer, $Terminal, transaction, channelID, ARPC) ]
  --[ Commit($Issuer, ~PAN, <'Card', 'Issuer', transaction>),
      Commit($Issuer, $Terminal, <'Terminal', 'Issuer', transaction>),
      Honest($Issuer), Honest(~PAN) ]->
    [ Send($Issuer, $Terminal, <channelID, '2'>, <'ACCEPTED', ARPC>) ]



/////////////////////////////////////////////////////
//                 Restrictions                    //
/////////////////////////////////////////////////////
restriction equal:
  "All a b #i. Eq(a, b)@i ==> a = b"

restriction once: //checks that ATC is different per card session
  "All a #i #j. Once(a)@i & Once(a)@j ==> #i = #j"

////////////////////////////////////////////
//              Sanity Check              //
////////////////////////////////////////////
  
lemma executable_offline:
  exists-trace
  "Ex PAN t #i #j.
    not(Online()@j) &
    //Card-Terminal agreement
    i < j &
    Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@i &
    Commit('Terminal', PAN, <'Card', 'Terminal', t>)@j &
    not (Ex A #a. Compromise(A)@a)"

lemma executable_online:
  exists-trace
  "Ex PAN Issuer t #i #j #k #l.
    Online()@j &
    //Card-Terminal agreement
    i < j &
    Running(PAN, 'Terminal', <'Card', 'Terminal', t>)@i &
    Commit('Terminal', PAN, <'Card', 'Terminal', t>)@j &
    //Card-Issuer agreement
    k < l &
    Running(PAN, Issuer, <'Card', 'Issuer', t>)@k &
    Commit(Issuer, PAN, <'Card', 'Issuer', t>)@l &
    not (Ex A #a. Compromise(A)@a)"

/////////////////////////////////////////////////////
//           Security Properties                   //
/////////////////////////////////////////////////////


// ================== Offline Authentication =================== //

lemma auth_to_terminal_offline:
  "All PAN trans #j.
  (not(Online()@j) & 
   Commit('Terminal', PAN, <'Card', 'Terminal', trans>)@j)
   ==>
  (Ex #i. Running(PAN, 'Terminal', <'Card', 'Terminal', trans>)@i) | 
  (Ex C #r. Compromise(C)@r & Honest(C)@j)"



// ================== Online Authentication =================== //

lemma auth_to_terminal_online:
  "All term iss PAN trans #j.
  (Online()@j &
   Commit('Terminal', PAN, <'Card', 'Terminal', trans>)@j & 
   Commit(term, iss, <'Issuer', 'Terminal', trans>)@j) 
   ==>
  (Ex #i. Running(PAN, 'Terminal', <'Card', 'Terminal', trans>)@i & 
   Ex #i. Running(iss, term, <'Issuer', 'Terminal', trans>)@i) | 
  (Ex C #r. Compromise(C)@r & Honest(C)@j)"



// ================== Issuer Authentication =================== //

lemma auth_to_issuer:
  "All term iss PAN trans #j.
  (Online()@j &
   Commit(iss, PAN, <'Card', 'Issuer', trans>)@j &
   Commit(iss, term, <'Terminal', 'Issuer', trans>)@j) 
   ==>
  (Ex #i. Running(PAN, iss, <'Card', 'Issuer', trans>)@i & 
   Ex #i. Running(term, iss, <'Terminal', 'Issuer', trans>)@i) | 
  (Ex C #r. Compromise(C)@r & Honest(C)@j)"


end
